/*
【组队竞赛】牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,即每个队伍3人.
牛牛发现队伍的水平值等于该队伍队员中第二高水平值。
例如:
一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2
为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。

如样例所示:
如果牛牛把6个队员划分到两个队伍
如果方案为:
team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.
而如果方案为:
team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.
没有比总和为10更大的方案,所以输出10.

输入描述：
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)
第二行包括3*n个整数a_i(1 ≤ a_i ≤ 10^9),表示每个参赛选手的水平值.

输出描述：输出一个整数表示所有队伍的水平值总和最大值.

示例1：
输入：
2
5 2 8 5 1 5
输出：
10
代码片段
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)
第二行包括3*n个整数a_i(1 ≤ a_i ≤ 10^9),表示每个参赛选手的水平值.
输出一个整数表示所有队伍的水平值总和最大值.
*/
/*
分析题意：
组队，3*n个人 共组成n队 每队3人
三人中的中位数代表队伍的水平
安排队伍，使 所有队伍水平的和最大
思路分析：
题给了一串元素个数为 3*n 的数组，以每份3个数，分为n份
怎么分 能使 这n份的中位数的和最大？
首先对数组排序，然后可以分析出，此时 能做一组中最大中位数的数是 第3*n-2位，组成的组可为：0, 3*n-2, 3*n-1
然后剩余的 能做一组中最大中位数的数是 第3*n-4位, 组成的组可为：1, 3*n-4, 3*n-3
一直分析下去，可以得出，中位数的最大和 为第 [n, n + 2, n + 4,……, 3*n-4, 3*n-2] 位的和
如果题目没有限制 a_i 的范围，则可能需要考虑大数值的情况，可以考虑使用string 字符串相加
实在分析不出其他更快的解法了
*/
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<long long> gradeV;
    long long n;
    cin >> n;
    for(long long i = 0; i < 3*n; i++) {
        long long grade;
        cin >> grade;
        gradeV.push_back(grade);
    }
    //排序
    sort(gradeV.begin(), gradeV.end());
    long long result = 0;
    // 计算 第 [n, n + 2, n + 4,……, 3*n-4, 3*n-2] 位的和
    for(long long i = n; i < 3*n; i+=2) {
        result += gradeV[i];
    }
    cout << result;
    return 0;
}