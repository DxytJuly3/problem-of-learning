/*
链接：https://www.nowcoder.com/questionTerminal/e7e0d226f1e84ba7ab8b28efc6e1aebc
来源：牛客网

给定两个int A和B。编写一个函数返回A+B的值，但不得使用+或其他算数运算符。

测试样例：
1,2
返回：
3
*/
/*
算数运算符包括：+ - * / ^ %
思路分析：
    3  + 4   = 7                   7                  0                  7
    011 + 100 = 111    011 | 100 = 111    011 & 100 = 000    011 ^ 100 = 111
    5   + 7   = 12                7                  5                  2
    101 + 111 = 1100  101 | 111 = 111    101 & 111 = 101    101 ^ 111 = 010
    8    + 12   = 20                    12                   8                    4
    1000 + 1100 = 10100   1000 | 1100 = 1100   1000 & 1100 = 1000   1000 ^ 1100 = 0100
     
    根据上边的计算可以看出
        两数的 ^ 操作结果, 即表示两数相加之后 对应位的结果
        两数的 & 操作结果, 可以表示对应位是否需要 进位
        3+4=7 中, ^操作得 111, &操作得 000, 即表示 对应位结果应为111, 且不需要进位, 即得 111
        5+7=12 中, ^操作得 010, &操作得 101, 即表示 对应位结果应为010, 但101, 1所在的位是需要进位的
                                                所以 对010, 0 和 2位进位, 可得 1100
        8+12=20 中, ^操作得 0100, &操作得 1000, 即表示 对应位结果应为 0100, 又由1000得, 1所在位需要进位
                                                所以 对0100, 3位进位, 可得 10100
        那么 怎么计算呢？
        在上述计算中可以看出, 当 &操作结果 所有位为0时, 表示^操作的结果没有进位
        而^操作结果又是两数相加后对应位的结果, ^操作的结果 的每一位不需要进位, 就表示此结果就是最终的结果了
        怎么把进位加上呢？
        用 ^操作的结果, 再与 &的结果<<1 ^操作, 就将进位加上了
        为什么？
        因为 两数的 ^操作的结果 是在不考虑进位情况下, 两数相加对应位的结果
        &操作的结果 是对应位是否需要进位的结果, 如果对应位需要进位, 就代表对应位的左一位需要加1
        那么将 &操作后的结果 << 1, 再将其加上 不考虑进位情况下, 两数相加对应位的结果
        是不是就表示 加上了进位呢？
        比如拿 5+7=12 为例：
        ^操作 得 010, &操作 得 101, 2 和 0位需要进位, 其实是表示 3和1位是需要+1的, 所以 让101 <<  1得 1010
        再将其与 010 ^操作 得出1100, 就是上次计算加上进位后得结果
        执行此操作 将上一次得进位加上之后, 还需要计算加上进位后 还需不需要继续进位, 所以还需要求 &操作
        直到 &操作的结果为0时, 就可以表示 不需要进位, 计算也结束了
*/
 
class UnusualAdd {
public:
    int addAB(int A, int B) {
        while(B!=0) {
            int XOR = A ^ B;
            B = (A & B) << 1;    // 如果A&B为0, << 1操作也就没有意义
            A = XOR;
        }
         
        return A;
    }
};